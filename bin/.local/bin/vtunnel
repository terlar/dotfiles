#!/usr/bin/env bash
set -e
set -o pipefail

# Setup one vagrant SSH cache-file per folder, in case we have different
# Vagrant instances running.
readonly SSH_CONFIG_CACHE="/tmp/vagrant-ssh-config-${PWD//\//%}"

cache_ssh_config() {
	vagrant ssh-config > "${SSH_CONFIG_CACHE}"
}

tunnel() {
	if [[ ! -f "${SSH_CONFIG_CACHE}" ]]
	then
		cache_ssh_config
	fi

	local port="${1:?missing target port}"
	local host_port="${2:-$1}"

	# -f Run command in background
	# -N Do not execute a remote command (we only tunnel)
	# -q Suppress warning and diagnostic messages
	# -F Read vagrant SSH config from cache file
	ssh -f -N -q -F "${SSH_CONFIG_CACHE}" -L"${port}:127.0.0.1:${host_port}" default
	print_info "${port}:127.0.0.1:${host_port}"
}

vagrant_running() {
	if [[ ! -f "${SSH_CONFIG_CACHE}" ]]
	then
		cache_ssh_config
	fi

	ssh -q -F "${SSH_CONFIG_CACHE}" default true
}

print_info() {
	local msg="$1"
	local command="${0##*/}"
	echo "${command}: ${msg}"
}

print_error() {
	local msg="$1"
	local command="${0##*/}"
	>&2 echo "${command}: error: ${msg}"
}

main() {
	if [[ ! -f "${PWD}/Vagrantfile" ]]
	then
		print_error "no Vagrantfile in current directory"
		exit 1
	fi

	if vagrant_running
	then
		tunnel "$@"
	else
		echo
		print_error "could not connect to vagrant"
		rm "${SSH_CONFIG_CACHE}"

		read -r -n 1 -p "Do you want to start vagrant and retry? [y/N] " choice
		echo
		case "${choice}" in
			[Yy]*)
				vagrant up && tunnel "$@"
				;;
			*)
				exit 1
				;;
		esac
	fi
}

main "$@"
