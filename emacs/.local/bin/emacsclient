#!/usr/bin/env bash
[[ "${TRACE}" ]] && set -x
set -eu
set -o pipefail

is_graphical() {
	[ -n "${DISPLAY:-}" ]
}

is_interactive() {
	fd=0 # stdin
	[ -t "${fd}" ] || [ -p /dev/stdin ]
}

has_xdotool() {
	command -v xdotool &>/dev/null
}

current_desktop() {
	xdotool get_desktop
}

bring_and_raise_window() {
	has_xdotool || return

	local wmname desktop
	wmname="${1?window name not provided}"
	desktop="$(current_desktop)"

	xdotool search --name "${wmname}" set_desktop_for_window "${desktop}" windowactivate
}

has_window() {
	local wmname="${1?window name not provided}"

	xprop -name "${wmname}" &>/dev/null
}

main() {
	local raise=0
	local wmname="editor"

	while getopts ":N:-:" opt
	do
                case "${opt}" in
                        N ) wmname="${OPTARG}" ;;
                        - ) LONG_OPTARG="${OPTARG#*=}"
			    case $OPTARG in
				    name=?* ) wmname="${LONG_OPTARG}" ;;
				    raise   ) raise=1 ;;
				    # Stop parsing at first non-matching
				    # option and shift back the index so
				    # we don't drop any options.
				    *       ) OPTIND="$((OPTIND - 1))"
					      break ;;
			    esac ;;
			'?')
				>&2 echo "invalid option -- '${OPTARG}'"
				return 1 ;;
			:)
				>&2 echo "option requires an argument -- '${OPTARG}'"
				return 1 ;;
		esac

	done
	shift "$((OPTIND - 1))"

	is_interactive && raise=1

	if [[ "${raise}" = 1 ]] && is_graphical
	then
		# Open editor window if not available
		if has_window "${wmname}"
		then
			bring_and_raise_window "${wmname}"
		else
			exec /usr/bin/emacsclient -c -F "((name . \"${wmname}\"))" "$@"
		fi
	fi

	exec /usr/bin/emacsclient "$@"
}

main "$@"
